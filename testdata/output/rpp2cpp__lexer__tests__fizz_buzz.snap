---
source: src/lexer/mod.rs
expression: snapshot_string
---
EN VAZHI THANI VAZHI myfunc_one
^^^^^^^^^^^^^^^^^^^^ Token { kind: KeyWord(FuncDeclare), span: Span { row: 0, col: 0, length: 20 } }
                     ^^^^^^^^^^ Token { kind: Ident("myfunc_one"), span: Span { row: 0, col: 21, length: 10 } }
    AANDAVAN SOLLRAN ix ARUNACHALAM SEIYARAN 100;
    ^^^^^^^^^^^^^^^^ Token { kind: KeyWord(StartDeclare), span: Span { row: 1, col: 4, length: 16 } }
                     ^^ Token { kind: Ident("ix"), span: Span { row: 1, col: 21, length: 2 } }
                        ^^^^^^^^^^^^^^^^^^^^ Token { kind: KeyWord(Declare), span: Span { row: 1, col: 24, length: 20 } }
                                             ^^^ Token { kind: Literal(Int(100)), span: Span { row: 1, col: 45, length: 3 } }
                                                ^ Token { kind: KeyWord(SemiColon), span: Span { row: 1, col: 48, length: 1 } }
    DOT "returning ix =" ix "to main";
    ^^^ Token { kind: KeyWord(Print), span: Span { row: 2, col: 4, length: 3 } }
        ^^^^^^^^^^^^^^^^ Token { kind: Literal(Str("returning ix =")), span: Span { row: 2, col: 8, length: 16 } }
                         ^^ Token { kind: Ident("ix"), span: Span { row: 2, col: 25, length: 2 } }
                            ^^^^^^^^^ Token { kind: Literal(Str("to main")), span: Span { row: 2, col: 28, length: 9 } }
                                     ^ Token { kind: KeyWord(SemiColon), span: Span { row: 2, col: 37, length: 1 } }
    IDHU EPDI IRUKKU ix;
    ^^^^^^^^^^^^^^^^ Token { kind: KeyWord(FuncReturn), span: Span { row: 3, col: 4, length: 16 } }
                     ^^ Token { kind: Ident("ix"), span: Span { row: 3, col: 21, length: 2 } }
                       ^ Token { kind: KeyWord(SemiColon), span: Span { row: 3, col: 23, length: 1 } }
MARAKKADHINGA
^^^^^^^^^^^^^ Token { kind: KeyWord(EndFunc), span: Span { row: 4, col: 0, length: 13 } }

LAKSHMI START
^^^^^^^^^^^^^ Token { kind: KeyWord(ProgramStart), span: Span { row: 6, col: 0, length: 13 } }
    !! checking exprs
    ^^^^^^^^^^^^^^^^^ Token { kind: Comment(" checking exprs"), span: Span { row: 7, col: 4, length: 17 } }
    25 + 15;
    ^^ Token { kind: Literal(Int(25)), span: Span { row: 8, col: 4, length: 2 } }
       ^ Token { kind: KeyWord(Sum), span: Span { row: 8, col: 7, length: 1 } }
         ^^ Token { kind: Literal(Int(15)), span: Span { row: 8, col: 9, length: 2 } }
           ^ Token { kind: KeyWord(SemiColon), span: Span { row: 8, col: 11, length: 1 } }
    25 - 15;
    ^^ Token { kind: Literal(Int(25)), span: Span { row: 9, col: 4, length: 2 } }
       ^ Token { kind: KeyWord(Sub), span: Span { row: 9, col: 7, length: 1 } }
         ^^ Token { kind: Literal(Int(15)), span: Span { row: 9, col: 9, length: 2 } }
           ^ Token { kind: KeyWord(SemiColon), span: Span { row: 9, col: 11, length: 1 } }
    5.5 * -5;
    ^^^ Token { kind: Literal(Float(5.5)), span: Span { row: 10, col: 4, length: 3 } }
        ^ Token { kind: KeyWord(Mul), span: Span { row: 10, col: 8, length: 1 } }
          ^ Token { kind: KeyWord(Sub), span: Span { row: 10, col: 10, length: 1 } }
           ^ Token { kind: Literal(Int(5)), span: Span { row: 10, col: 11, length: 1 } }
            ^ Token { kind: KeyWord(SemiColon), span: Span { row: 10, col: 12, length: 1 } }
    5 / 5;
    ^ Token { kind: Literal(Int(5)), span: Span { row: 11, col: 4, length: 1 } }
      ^ Token { kind: KeyWord(Div), span: Span { row: 11, col: 6, length: 1 } }
        ^ Token { kind: Literal(Int(5)), span: Span { row: 11, col: 8, length: 1 } }
         ^ Token { kind: KeyWord(SemiColon), span: Span { row: 11, col: 9, length: 1 } }
    51 % 5;
    ^^ Token { kind: Literal(Int(51)), span: Span { row: 12, col: 4, length: 2 } }
       ^ Token { kind: KeyWord(Mod), span: Span { row: 12, col: 7, length: 1 } }
         ^ Token { kind: Literal(Int(5)), span: Span { row: 12, col: 9, length: 1 } }
          ^ Token { kind: KeyWord(SemiColon), span: Span { row: 12, col: 10, length: 1 } }

    !! testing while loop
    ^^^^^^^^^^^^^^^^^^^^^ Token { kind: Comment(" testing while loop"), span: Span { row: 14, col: 4, length: 21 } }
    BABA COUNTING STARTS True {
    ^^^^^^^^^^^^^^^^^^^^ Token { kind: KeyWord(WhileLoop), span: Span { row: 15, col: 4, length: 20 } }
                         ^^^^ Token { kind: Literal(BoolTrue), span: Span { row: 15, col: 25, length: 4 } }
                              ^ Token { kind: KeyWord(LeftBrace), span: Span { row: 15, col: 30, length: 1 } }
        DOT ix;
        ^^^ Token { kind: KeyWord(Print), span: Span { row: 16, col: 8, length: 3 } }
            ^^ Token { kind: Ident("ix"), span: Span { row: 16, col: 12, length: 2 } }
              ^ Token { kind: KeyWord(SemiColon), span: Span { row: 16, col: 14, length: 1 } }
        ix BHAJJI SAAPDU ix + 1;
        ^^ Token { kind: Ident("ix"), span: Span { row: 17, col: 8, length: 2 } }
           ^^^^^^^^^^^^^ Token { kind: KeyWord(Assign), span: Span { row: 17, col: 11, length: 13 } }
                         ^^ Token { kind: Ident("ix"), span: Span { row: 17, col: 25, length: 2 } }
                            ^ Token { kind: KeyWord(Sum), span: Span { row: 17, col: 28, length: 1 } }
                              ^ Token { kind: Literal(Int(1)), span: Span { row: 17, col: 30, length: 1 } }
                               ^ Token { kind: KeyWord(SemiColon), span: Span { row: 17, col: 31, length: 1 } }
        EN PEAR MANICKAM ix >= 5 {
        ^^^^^^^^^^^^^^^^ Token { kind: KeyWord(IfCond), span: Span { row: 18, col: 8, length: 16 } }
                         ^^ Token { kind: Ident("ix"), span: Span { row: 18, col: 25, length: 2 } }
                            ^^ Token { kind: KeyWord(GreaterThanEqual), span: Span { row: 18, col: 28, length: 2 } }
                               ^ Token { kind: Literal(Int(5)), span: Span { row: 18, col: 31, length: 1 } }
                                 ^ Token { kind: KeyWord(LeftBrace), span: Span { row: 18, col: 33, length: 1 } }
            DOT "breaking out of loop...";
            ^^^ Token { kind: KeyWord(Print), span: Span { row: 19, col: 12, length: 3 } }
                ^^^^^^^^^^^^^^^^^^^^^^^^^ Token { kind: Literal(Str("breaking out of loop...")), span: Span { row: 19, col: 16, length: 25 } }
                                         ^ Token { kind: KeyWord(SemiColon), span: Span { row: 19, col: 41, length: 1 } }
            BLACK SHEEP;
            ^^^^^^^^^^^ Token { kind: KeyWord(BreakLoop), span: Span { row: 20, col: 12, length: 11 } }
                       ^ Token { kind: KeyWord(SemiColon), span: Span { row: 20, col: 23, length: 1 } }
        } KATHAM KATHAM;
        ^ Token { kind: KeyWord(RightBrace), span: Span { row: 21, col: 8, length: 1 } }
          ^^^^^^^^^^^^^ Token { kind: KeyWord(EndBlock), span: Span { row: 21, col: 10, length: 13 } }
                       ^ Token { kind: KeyWord(SemiColon), span: Span { row: 21, col: 23, length: 1 } }
    } KATHAM KATHAM;
    ^ Token { kind: KeyWord(RightBrace), span: Span { row: 22, col: 4, length: 1 } }
      ^^^^^^^^^^^^^ Token { kind: KeyWord(EndBlock), span: Span { row: 22, col: 6, length: 13 } }
                   ^ Token { kind: KeyWord(SemiColon), span: Span { row: 22, col: 19, length: 1 } }

    y CHUMMA ADHURUDHULA myfunc_one;
    ^ Token { kind: Ident("y"), span: Span { row: 24, col: 4, length: 1 } }
      ^^^^^^^^^^^^^^^^^^ Token { kind: KeyWord(FuncCall), span: Span { row: 24, col: 6, length: 18 } }
                         ^^^^^^^^^^ Token { kind: Ident("myfunc_one"), span: Span { row: 24, col: 25, length: 10 } }
                                   ^ Token { kind: KeyWord(SemiColon), span: Span { row: 24, col: 35, length: 1 } }

    AANDAVAN SOLLRAN ix ARUNACHALAM SEIYARAN 1;
    ^^^^^^^^^^^^^^^^ Token { kind: KeyWord(StartDeclare), span: Span { row: 26, col: 4, length: 16 } }
                     ^^ Token { kind: Ident("ix"), span: Span { row: 26, col: 21, length: 2 } }
                        ^^^^^^^^^^^^^^^^^^^^ Token { kind: KeyWord(Declare), span: Span { row: 26, col: 24, length: 20 } }
                                             ^ Token { kind: Literal(Int(1)), span: Span { row: 26, col: 45, length: 1 } }
                                              ^ Token { kind: KeyWord(SemiColon), span: Span { row: 26, col: 46, length: 1 } }
    AANDAVAN SOLLRAN range ARUNACHALAM SEIYARAN 16;
    ^^^^^^^^^^^^^^^^ Token { kind: KeyWord(StartDeclare), span: Span { row: 27, col: 4, length: 16 } }
                     ^^^^^ Token { kind: Ident("range"), span: Span { row: 27, col: 21, length: 5 } }
                           ^^^^^^^^^^^^^^^^^^^^ Token { kind: KeyWord(Declare), span: Span { row: 27, col: 27, length: 20 } }
                                                ^^ Token { kind: Literal(Int(16)), span: Span { row: 27, col: 48, length: 2 } }
                                                  ^ Token { kind: KeyWord(SemiColon), span: Span { row: 27, col: 50, length: 1 } }

    NAA 1 THADAVA SONNA range THADAVA SONNA MADHRI {
    ^^^ Token { kind: KeyWord(ForStart), span: Span { row: 29, col: 4, length: 3 } }
        ^ Token { kind: Literal(Int(1)), span: Span { row: 29, col: 8, length: 1 } }
          ^^^^^^^^^^^^^ Token { kind: KeyWord(ForRangeStart), span: Span { row: 29, col: 10, length: 13 } }
                        ^^^^^ Token { kind: Ident("range"), span: Span { row: 29, col: 24, length: 5 } }
                              ^^^^^^^^^^^^^^^^^^^^ Token { kind: KeyWord(ForRangeEnd), span: Span { row: 29, col: 30, length: 20 } }
                                                   ^ Token { kind: KeyWord(LeftBrace), span: Span { row: 29, col: 51, length: 1 } }
        EN PEAR MANICKAM ix%15==0 {
        ^^^^^^^^^^^^^^^^ Token { kind: KeyWord(IfCond), span: Span { row: 30, col: 8, length: 16 } }
                         ^^ Token { kind: Ident("ix"), span: Span { row: 30, col: 25, length: 2 } }
                           ^ Token { kind: KeyWord(Mod), span: Span { row: 30, col: 27, length: 1 } }
                            ^^ Token { kind: Literal(Int(15)), span: Span { row: 30, col: 28, length: 2 } }
                              ^^ Token { kind: KeyWord(Equal), span: Span { row: 30, col: 30, length: 2 } }
                                ^ Token { kind: Literal(Int(0)), span: Span { row: 30, col: 32, length: 1 } }
                                  ^ Token { kind: KeyWord(LeftBrace), span: Span { row: 30, col: 34, length: 1 } }
            DOT "FizzBuzz";
            ^^^ Token { kind: KeyWord(Print), span: Span { row: 31, col: 12, length: 3 } }
                ^^^^^^^^^^ Token { kind: Literal(Str("FizzBuzz")), span: Span { row: 31, col: 16, length: 10 } }
                          ^ Token { kind: KeyWord(SemiColon), span: Span { row: 31, col: 26, length: 1 } }
        } ENAKKU INNURU PEAR IRUKKU {
        ^ Token { kind: KeyWord(RightBrace), span: Span { row: 32, col: 8, length: 1 } }
          ^^^^^^^^^^^^^^^^^^^^^^^^^ Token { kind: KeyWord(ElseCond), span: Span { row: 32, col: 10, length: 25 } }
                                    ^ Token { kind: KeyWord(LeftBrace), span: Span { row: 32, col: 36, length: 1 } }
            EN PEAR MANICKAM ix%3==0 {
            ^^^^^^^^^^^^^^^^ Token { kind: KeyWord(IfCond), span: Span { row: 33, col: 12, length: 16 } }
                             ^^ Token { kind: Ident("ix"), span: Span { row: 33, col: 29, length: 2 } }
                               ^ Token { kind: KeyWord(Mod), span: Span { row: 33, col: 31, length: 1 } }
                                ^ Token { kind: Literal(Int(3)), span: Span { row: 33, col: 32, length: 1 } }
                                 ^^ Token { kind: KeyWord(Equal), span: Span { row: 33, col: 33, length: 2 } }
                                   ^ Token { kind: Literal(Int(0)), span: Span { row: 33, col: 35, length: 1 } }
                                     ^ Token { kind: KeyWord(LeftBrace), span: Span { row: 33, col: 37, length: 1 } }
                DOT "Fizz";
                ^^^ Token { kind: KeyWord(Print), span: Span { row: 34, col: 16, length: 3 } }
                    ^^^^^^ Token { kind: Literal(Str("Fizz")), span: Span { row: 34, col: 20, length: 6 } }
                          ^ Token { kind: KeyWord(SemiColon), span: Span { row: 34, col: 26, length: 1 } }
            } ENAKKU INNURU PEAR IRUKKU {
            ^ Token { kind: KeyWord(RightBrace), span: Span { row: 35, col: 12, length: 1 } }
              ^^^^^^^^^^^^^^^^^^^^^^^^^ Token { kind: KeyWord(ElseCond), span: Span { row: 35, col: 14, length: 25 } }
                                        ^ Token { kind: KeyWord(LeftBrace), span: Span { row: 35, col: 40, length: 1 } }
                EN PEAR MANICKAM ix%5==0 {
                ^^^^^^^^^^^^^^^^ Token { kind: KeyWord(IfCond), span: Span { row: 36, col: 16, length: 16 } }
                                 ^^ Token { kind: Ident("ix"), span: Span { row: 36, col: 33, length: 2 } }
                                   ^ Token { kind: KeyWord(Mod), span: Span { row: 36, col: 35, length: 1 } }
                                    ^ Token { kind: Literal(Int(5)), span: Span { row: 36, col: 36, length: 1 } }
                                     ^^ Token { kind: KeyWord(Equal), span: Span { row: 36, col: 37, length: 2 } }
                                       ^ Token { kind: Literal(Int(0)), span: Span { row: 36, col: 39, length: 1 } }
                                         ^ Token { kind: KeyWord(LeftBrace), span: Span { row: 36, col: 41, length: 1 } }
                    DOT "Buzz";
                    ^^^ Token { kind: KeyWord(Print), span: Span { row: 37, col: 20, length: 3 } }
                        ^^^^^^ Token { kind: Literal(Str("Buzz")), span: Span { row: 37, col: 24, length: 6 } }
                              ^ Token { kind: KeyWord(SemiColon), span: Span { row: 37, col: 30, length: 1 } }
                } ENAKKU INNURU PEAR IRUKKU {
                ^ Token { kind: KeyWord(RightBrace), span: Span { row: 38, col: 16, length: 1 } }
                  ^^^^^^^^^^^^^^^^^^^^^^^^^ Token { kind: KeyWord(ElseCond), span: Span { row: 38, col: 18, length: 25 } }
                                            ^ Token { kind: KeyWord(LeftBrace), span: Span { row: 38, col: 44, length: 1 } }
                    DOT ix;
                    ^^^ Token { kind: KeyWord(Print), span: Span { row: 39, col: 20, length: 3 } }
                        ^^ Token { kind: Ident("ix"), span: Span { row: 39, col: 24, length: 2 } }
                          ^ Token { kind: KeyWord(SemiColon), span: Span { row: 39, col: 26, length: 1 } }
                } KATHAM KATHAM;
                ^ Token { kind: KeyWord(RightBrace), span: Span { row: 40, col: 16, length: 1 } }
                  ^^^^^^^^^^^^^ Token { kind: KeyWord(EndBlock), span: Span { row: 40, col: 18, length: 13 } }
                               ^ Token { kind: KeyWord(SemiColon), span: Span { row: 40, col: 31, length: 1 } }
            } KATHAM KATHAM;
            ^ Token { kind: KeyWord(RightBrace), span: Span { row: 41, col: 12, length: 1 } }
              ^^^^^^^^^^^^^ Token { kind: KeyWord(EndBlock), span: Span { row: 41, col: 14, length: 13 } }
                           ^ Token { kind: KeyWord(SemiColon), span: Span { row: 41, col: 27, length: 1 } }
        } KATHAM KATHAM;
        ^ Token { kind: KeyWord(RightBrace), span: Span { row: 42, col: 8, length: 1 } }
          ^^^^^^^^^^^^^ Token { kind: KeyWord(EndBlock), span: Span { row: 42, col: 10, length: 13 } }
                       ^ Token { kind: KeyWord(SemiColon), span: Span { row: 42, col: 23, length: 1 } }
        ix BHAJJI SAAPDU ix+1;
        ^^ Token { kind: Ident("ix"), span: Span { row: 43, col: 8, length: 2 } }
           ^^^^^^^^^^^^^ Token { kind: KeyWord(Assign), span: Span { row: 43, col: 11, length: 13 } }
                         ^^ Token { kind: Ident("ix"), span: Span { row: 43, col: 25, length: 2 } }
                           ^ Token { kind: KeyWord(Sum), span: Span { row: 43, col: 27, length: 1 } }
                            ^ Token { kind: Literal(Int(1)), span: Span { row: 43, col: 28, length: 1 } }
                             ^ Token { kind: KeyWord(SemiColon), span: Span { row: 43, col: 29, length: 1 } }
    } KATHAM KATHAM;
    ^ Token { kind: KeyWord(RightBrace), span: Span { row: 44, col: 4, length: 1 } }
      ^^^^^^^^^^^^^ Token { kind: KeyWord(EndBlock), span: Span { row: 44, col: 6, length: 13 } }
                   ^ Token { kind: KeyWord(SemiColon), span: Span { row: 44, col: 19, length: 1 } }
MAGIZHCHI
^^^^^^^^^ Token { kind: KeyWord(ProgramEnd), span: Span { row: 45, col: 0, length: 9 } }

